import asyncio
import logging
import sys
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, html, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from key import my_key
from table import append_user
from google_sheets import append_to_sheet
from flask import Flask, request
from yookassa import Configuration, Payment
import uuid
from decimal import Decimal, ROUND_HALF_UP


Configuration.account_id = "1085561"  # –∏–ª–∏ os.getenv("YOOKASSA_SHOP_ID")
Configuration.secret_key = "live_L2jrGwfcPBjEmTk_tJlzN7PaD36dPljqctXPrw0TVbU"  # –∏–ª–∏ os.getenv("YOOKASSA_SECRET_KEY")


TOKEN = my_key
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

available_tickets = 700
user_start_times = {}  # user_id -> datetime


class Form(StatesGroup):
    name = State()
    phone = State()
    ticket_count = State()


@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    args = message.text.split(maxsplit=1)
    arg = args[1] if len(args) > 1 else None
    print(f"/start received with arg: {arg}")

    if arg == "payment_done":
        await message.answer(
            "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n\n"
            "–¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, —É–¥–∞—á–∏! üçÄ"
        )
        return

    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîç –£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è', callback_data='show_rules')]
    ])

    try:
        append_user(message.from_user.id, message.from_user.first_name, "")
    except Exception as e:
        print(f"Error in append_user: {e}")

    await message.answer(
        f"<b><i>–ü—Ä–∏–≤–µ—Ç! {html.bold(message.from_user.first_name)}, —ç—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã NPAuto</i></b> üëã \n\n"
        "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ <b><i>–ú–´ –ø—Ä–æ–≤–µ–¥–µ–º</i></b> —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞—Å—à—Ç–∞–±–Ω—ã–π <b>—Ä–æ–∑—ã–≥—Ä—ã—à –∞–≤—Ç–æ–º–æ–±–∏–ª—è!</b> üöó üéÅ \n\n"
        "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–Ω–µ—Ç –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π <b><i>Audi A4</i></b>\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è üçÄ",
        reply_markup=inline_keyboard,
        parse_mode=ParseMode.HTML
    )


@dp.callback_query(F.data == "show_rules")
async def send_rules(callback: types.CallbackQuery):
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+r2nV1ThTyZVlNzli")],
        [InlineKeyboardButton(text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="participate")]
    ])
    await callback.answer()

    await callback.message.answer_video(
        video="BAACAgIAAxkBAAMFaF_JunR6fKD6Dq6lHtOJflr8hsAAAptwAAI3qwABS5CXnF6ECpdsNgQ",  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π file_id
        caption=(
            "<b><i>–†–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –º—ã –±—É–¥–µ–º –ø–æ\n"
            "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º –±–∏–ª–µ—Ç–∞–º —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–º –≤–∞–º\n"
            "–ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º</i></b>1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£\n\n"
            "<b><i>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –ø—Ä–æ—Å—Ç—ã:üìã</i></b>\n\n"
            "1. –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <b><i>NPAuto</i></b>\n"
            "üî• —á—Ç–æ–± –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π\n\n"
            "2. –ö—É–ø–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é\n"
            "1000—Ä—É–± –∏ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞üî¢\n\n"
            "<i>–í—Å–µ–≥–æ –≤ –ø—Ä–æ–¥–∞–∂–µ 700 –±–∏–ª–µ—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "–º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ</i>üòé\n\n"
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å\n"
            "—Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ —É–¥–∞—á—É, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>—Å–ø–µ—Ü.</b>\n"
            "<b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 3 –±–∏–ª–µ—Ç–∞ –ø–æ —Ü–µ–Ω–µ 2-—Ö</b>üëå\n\n"
            "<i>*—Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å\n"
            "–ø–µ—Ä–≤—ã–µ 5 —á–∞—Å–æ–≤ —Å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∂</i>"
        ),
        reply_markup=inline_kb,
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "participate")
async def handle_participation(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channel_id = "@npcoolauto"  # üëà –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω

    bot = callback.bot
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="fill_form")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_rules")]
            ])
            await callback.message.answer(
                "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n"
                "–ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ —è –±—É–¥—É –µ–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —Ç–∞–∫ —á—Ç–æ\n"
                "–æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µüòâ\n\n"
                "–ò—Ç–∞–∫, –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É,\n"
                "–ø—Ä–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç –∏ —Ç—ã –≤ –¥–µ–ª–µ‚¨áÔ∏è",
                reply_markup=inline_kb
            )
        else:
            raise Exception("Not subscribed")
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞: {e}")
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+r2nV1ThTyZVlNzli")],
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])
        await callback.message.answer_photo(
            photo="AgACAgIAAxkBAAMDaF_JVWA10_CyZiTuXWzThJzp2xoAAnnzMRtu2fhKSg8xW2NZvC0BAAMCAAN4AAM2BA",  # –∑–∞–º–µ–Ω–∏—à—å –Ω–∞ —Å–≤–æ–π file_id
            caption="<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ üò¢</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É.",
            reply_markup=inline_kb,
            parse_mode="HTML"
        )


@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery):
    await handle_participation(callback)


@dp.callback_query(F.data == "fill_form")
async def start_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ <b>–Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–ú–Ø</b>\n"
                                  "üëá")
    await state.set_state(Form.name)


@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùó –¢—ã –Ω–µ –≤–≤–µ–ª –∏–º—èüò¢")
        return
    await state.update_data(name=name)
    await message.answer("üìû <b>–ò –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
                         "–≤ —Ñ–æ—Ä–º–∞—Ç: +79991234567\n\n"
                         "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Å–ø–∞–º–æ–º\n"
                         "–Ω–µ –±—É–¥–µ–ºüòâ")
    await state.set_state(Form.phone)


@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not (phone.startswith("+7") and len(phone) == 12 and phone[2:].isdigit()):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑üòâ")
        return

    await state.update_data(phone=phone)
    user_start_times[message.from_user.id] = datetime.now()

    await message.answer(f"<b>–ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –¢–´ —Ö–æ—á–µ—à—å"
                         f"–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?‚ò∫Ô∏è</b>\n\n"
                         f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {available_tickets} –±–∏–ª–µ—Ç–æ–≤\n\n"
                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –±–∏–ª–µ—Ç–∞ - <b>1000—Ä—É–±</b>üí∏\n\n"
                         f"–ß–µ–º –±–æ–ª—å—à–µ —É —Ç–µ–±—è –±–∏–ª–µ—Ç–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ\n"
                         f"—à–∞–Ω—Å–æ–≤ –≤—ã–π–≥—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º\n"
                         f"–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <b><i>3\n"
                         f"–±–∏–ª–µ—Ç–∞ –ø–æ —Ü–µ–Ω–µ 2-—Ö</i></b>ü§©\n\n"
                         f"<i>*—Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å\n"
                         f"–ø–µ—Ä–≤—ã–µ 5 —á–∞—Å–æ–≤ —Å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∂</i>")
    await state.set_state(Form.ticket_count)


@dp.message(Form.ticket_count)
async def process_ticket_count(message: types.Message, state: FSMContext):
    global available_tickets
    try:
        count = int(message.text.strip())
        if count <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–∏–ª–µ—Ç–æ–≤")
        return

    if count > available_tickets:
        await message.answer(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {available_tickets} –±–∏–ª–µ—Ç–æ–≤")
        return

    user_id = message.from_user.id
    start_time = user_start_times.get(user_id)
    now = datetime.now()

    discounted = False
    price = 1 * count
    if count == 3 and start_time and (now - start_time <= timedelta(hours=5)):
        price = 2
        discounted = True

    available_tickets -= count

    await state.update_data(ticket_count=count, price=price)
    user_data = await state.get_data()

    name = user_data.get("name")
    phone = user_data.get("phone")

    if not name or not phone:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    summary = f"‚úÖ –ë–∏–ª–µ—Ç–æ–≤: {count}\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±"
    if discounted:
        summary += "\nüéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <b>3 –±–∏–ª–µ—Ç–∞ –ø–æ —Ü–µ–Ω–µ 2!</b>"

    try:
        unit_price = Decimal(price) / count
        unit_price = unit_price.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
        print(unit_price)

        payment_data = {
            "amount": {
                "value": price,
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/npauto_gift_bot?start=payment_done"
            },
            "capture": True,
            "description": f"{message.from_user.first_name} –ø–æ–∫—É–ø–∞–µ—Ç {count} –±–∏–ª–µ—Ç–æ–≤",
            "receipt": {
                "customer": {
                    "phone": phone
                },
                "items": [
                    {
                        "description": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç",
                        "quantity": 1,
                        "amount": {
                            "value": price,
                            "currency": "RUB"
                        },
                        "vat_code": 1,
                        "payment_mode": "full_prepayment",
                        "payment_subject": "service"
                    }
                ]
            },
            "metadata": {
                "tg_id": str(message.from_user.id),
                "name": name,
                "phone": phone,
                "count": count
            }
        }

        print(payment_data)

        payment = Payment.create(payment_data, uuid.uuid4())
        confirmation_url = payment.confirmation.confirmation_url
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        logging.error("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:", exc_info=True)
        await state.clear()
        return

    pay_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=confirmation_url)]
    ])

    await message.answer(f"{summary}\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=pay_kb)
    await state.clear()


app = Flask(__name__)


@app.route('/yookassa/webhook', methods=['POST'])
def yookassa_webhook():
    print("üîî –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω –æ—Ç YooKassa")
    print(request.json)
    data = request.json

    if data['event'] == 'payment.succeeded':
        metadata = data['object']['metadata']
        user_id = int(metadata['tg_id'])
        name = metadata['name']
        phone = metadata['phone']
        count = int(metadata['count'])

        try:
            ticket_numbers = append_to_sheet(name, phone, count)
            asyncio.run(send_success_message(user_id, ticket_numbers))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    return '', 200


async def send_success_message(user_id: int, ticket_numbers: list[str]):
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.send_message(
        user_id,
        f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"–¢—ã –ø–æ–ª—É—á–∏–ª <b>{len(ticket_numbers)}</b> –±–∏–ª–µ—Ç(–æ–≤)\n"
        f"üìå –ù–æ–º–µ—Ä–∞: <b>{', '.join(ticket_numbers)}</b>\n\n"
        f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏! üçÄ"
    )


async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)


@dp.message(F.photo)
async def get_file_id(message: types.Message):
    file_id = message.photo[-1].file_id
    await message.answer(f"üì∏ file_id: <code>{file_id}</code>", parse_mode="HTML")
    print("üîç file_id:", file_id)


@dp.message(F.video)
async def get_video_file_id(message: types.Message):
    file_id = message.video.file_id
    await message.answer(f"üé• file_id –≤–∏–¥–µ–æ: <code>{file_id}</code>", parse_mode="HTML")
    print("üé¨ video_file_id:", file_id)


if __name__ == "__main__":
    import threading

    def start_flask():
        app.run(host="0.0.0.0", port=5000)

    threading.Thread(target=start_flask).start()
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())


if __name__ == "__main__":
    asyncio.run(send_success_message(user_id=123456789, ticket_numbers=["101", "102"]))
