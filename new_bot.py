import asyncio
import logging
import sys
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, html, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from key import my_key
from table import append_user
from google_sheets import append_to_sheet
from flask import Flask, request, g
from yookassa import Configuration, Payment
import uuid
from decimal import Decimal, ROUND_HALF_UP
import threading

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
Configuration.account_id = "1085561"
Configuration.secret_key = "live_L2jrGwfcPBjEmTk_tJlzN7PaD36dPljqctXPrw0TVbU"
TOKEN = my_key

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
app = Flask(__name__)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

available_tickets = 700
user_start_times = {}  # user_id -> datetime
TICKET_PRICE = 1000 # –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –≤ —Ä—É–±–ª—è—Ö

# --- FSM –°–¢–ï–ô–¢–´ ---
class Form(StatesGroup):
    name = State()
    phone = State()
    ticket_count = State()

# --- –•–ï–ù–î–õ–ï–†–´ AIOGRAM ---

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    # ... (–≤–∞—à –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    args = message.text.split(maxsplit=1)
    arg = args[1] if len(args) > 1 else None
    print(f"/start received with arg: {arg}")

    if arg == "payment_done":
        await message.answer(
            "üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n\n"
            "–¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, —É–¥–∞—á–∏! üçÄ"
        )
        return

    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîç –£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è', callback_data='show_rules')]
    ])

    try:
        append_user(message.from_user.id, message.from_user.first_name, "")
    except Exception as e:
        print(f"Error in append_user: {e}")

    await message.answer(
        f"<b><i>–ü—Ä–∏–≤–µ—Ç! {html.bold(message.from_user.first_name)}, —ç—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã NPAuto</i></b> üëã \n\n"
        "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ <b><i>–ú–´ –ø—Ä–æ–≤–µ–¥–µ–º</i></b> —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞—Å—à—Ç–∞–±–Ω—ã–π <b>—Ä–æ–∑—ã–≥—Ä—ã—à –∞–≤—Ç–æ–º–æ–±–∏–ª—è!</b> üöó üéÅ \n\n"
        "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–Ω–µ—Ç –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π <b><i>Audi A4</i></b>\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è üçÄ",
        reply_markup=inline_keyboard,
        parse_mode=ParseMode.HTML
    )

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–æ process_ticket_count –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@dp.callback_query(F.data == "show_rules")
async def send_rules(callback: types.CallbackQuery):
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+r2nV1ThTyZVlNzli")],
        [InlineKeyboardButton(text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="participate")]
    ])
    await callback.answer()

    await callback.message.answer_video(
        video="BAACAgIAAxkBAAMFaF_JunR6fKD6Dq6lHtOJflr8hsAAAptwAAI3qwABS5CXnF6ECpdsNgQ",  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π file_id
        caption=(
            "<b><i>–†–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –º—ã –±—É–¥–µ–º –ø–æ\n"
            "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º –±–∏–ª–µ—Ç–∞–º —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–º –≤–∞–º\n"
            "–ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º</i></b>1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£\n\n"
            "<b><i>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –ø—Ä–æ—Å—Ç—ã:üìã</i></b>\n\n"
            "1. –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <b><i>NPAuto</i></b>\n"
            "üî• —á—Ç–æ–± –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π\n\n"
            "2. –ö—É–ø–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é\n"
            "1000—Ä—É–± –∏ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞üî¢\n\n"
            "<i>–í—Å–µ–≥–æ –≤ –ø—Ä–æ–¥–∞–∂–µ 700 –±–∏–ª–µ—Ç–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "–º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ</i>üòé\n\n"
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å\n"
            "—Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ —É–¥–∞—á—É, –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>—Å–ø–µ—Ü.</b>\n"
            "<b>–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 3 –±–∏–ª–µ—Ç–∞ –ø–æ —Ü–µ–Ω–µ 2-—Ö</b>üëå\n\n"
            "<i>*—Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å\n"
            "–ø–µ—Ä–≤—ã–µ 5 —á–∞—Å–æ–≤ —Å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∂</i>"
        ),
        reply_markup=inline_kb,
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "participate")
async def handle_participation(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channel_id = "@npcoolauto"  # üëà –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω

    try:
        member = await callback.bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="fill_form")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_rules")]
            ])
            await callback.message.answer(
                "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n"
                "–ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ —è –±—É–¥—É –µ–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —Ç–∞–∫ —á—Ç–æ\n"
                "–æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µüòâ\n\n"
                "–ò—Ç–∞–∫, –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É,\n"
                "–ø—Ä–æ–±—Ä–µ—Å—Ç–∏ –±–∏–ª–µ—Ç –∏ —Ç—ã –≤ –¥–µ–ª–µ‚¨áÔ∏è",
                reply_markup=inline_kb
            )
        else:
            raise Exception("Not subscribed")
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+r2nV1ThTyZVlNzli")],
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])
        await callback.message.answer_photo(
            photo="AgACAgIAAxkBAAMDaF_JVWA10_CyZiTuXWzThJzp2xoAAnnzMRtu2fhKSg8xW2NZvC0BAAMCAAN4AAM2BA",
            caption="<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ üò¢</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É.",
            reply_markup=inline_kb,
            parse_mode="HTML"
        )


@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery):
    await handle_participation(callback)


@dp.callback_query(F.data == "fill_form")
async def start_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞ <b>–Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–ú–Ø</b>\n"
                                  "üëá")
    await state.set_state(Form.name)


@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    # ... (–≤–∞—à –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    name = message.text.strip()
    if not name:
        await message.answer("‚ùó –¢—ã –Ω–µ –≤–≤–µ–ª –∏–º—èüò¢")
        return
    await state.update_data(name=name)
    await message.answer("üìû <b>–ò –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
                         "–≤ —Ñ–æ—Ä–º–∞—Ç: +79991234567\n\n"
                         "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Å–ø–∞–º–æ–º\n"
                         "–Ω–µ –±—É–¥–µ–ºüòâ")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    # ... (–≤–∞—à –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    phone = message.text.strip()
    if not (phone.startswith("+7") and len(phone) == 12 and phone[2:].isdigit()):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑üòâ")
        return

    await state.update_data(phone=phone)
    user_start_times[message.from_user.id] = datetime.now()

    await message.answer(f"<b>–ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –¢–´ —Ö–æ—á–µ—à—å"
                         f"–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?‚ò∫Ô∏è</b>\n\n"
                         f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {available_tickets} –±–∏–ª–µ—Ç–æ–≤\n\n"
                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –±–∏–ª–µ—Ç–∞ - <b>{TICKET_PRICE} —Ä—É–±</b>üí∏\n\n"
                         f"–ß–µ–º –±–æ–ª—å—à–µ —É —Ç–µ–±—è –±–∏–ª–µ—Ç–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ\n"
                         f"—à–∞–Ω—Å–æ–≤ –≤—ã–π–≥—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º\n"
                         f"–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ —Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <b><i>3\n"
                         f"–±–∏–ª–µ—Ç–∞ –ø–æ —Ü–µ–Ω–µ 2-—Ö</i></b>ü§©\n\n"
                         f"<i>*—Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å\n"
                         f"–ø–µ—Ä–≤—ã–µ 5 —á–∞—Å–æ–≤ —Å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∂</i>")
    await state.set_state(Form.ticket_count)


@dp.message(Form.ticket_count)
async def process_ticket_count(message: types.Message, state: FSMContext):
    global available_tickets
    try:
        count = int(message.text.strip())
        if count <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–∏–ª–µ—Ç–æ–≤")
        return

    if count > available_tickets:
        await message.answer(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {available_tickets} –±–∏–ª–µ—Ç–æ–≤")
        return

    user_id = message.from_user.id
    start_time = user_start_times.get(user_id)
    now = datetime.now()

    discounted = False
    # !!! –ò–°–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–ò–ö–ê –¶–ï–ù–´ !!!
    price = TICKET_PRICE * count
    if count == 3 and start_time and (now - start_time <= timedelta(hours=5)):
        price = TICKET_PRICE * 2
        discounted = True

    # –£–º–µ–Ω—å—à–∞—Ç—å –±–∏–ª–µ—Ç—ã –ª—É—á—à–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º –∑–¥–µ—Å—å
    # available_tickets -= count

    await state.update_data(ticket_count=count, price=price)
    user_data = await state.get_data()

    name = user_data.get("name")
    phone = user_data.get("phone")

    if not name or not phone:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    summary = f"‚úÖ –ë–∏–ª–µ—Ç–æ–≤: {count}\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±"
    if discounted:
        summary += "\nüéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ <b>3 –±–∏–ª–µ—Ç–∞ –ø–æ —Ü–µ–Ω–µ 2!</b>"

    try:
        # !!! –í–ê–ñ–ù–û: –¶–µ–Ω–∞ –≤ YooKassa —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        payment_price_str = f"{price:.2f}"

        payment_data = {
            "amount": {
                "value": payment_price_str,
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{await bot.me()}/start?start=payment_done" # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π URL
            },
            "capture": True,
            "description": f"–ü–æ–∫—É–ø–∫–∞ {count} –±–∏–ª. –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ Audi A4 –æ—Ç NPAuto. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}",
            "receipt": {
                "customer": {
                    "phone": phone
                },
                "items": [
                    {
                        "description": f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à ({count} —à—Ç.)",
                        "quantity": "1.00", # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ - 1 (–ø–∞–∫–µ—Ç)
                        "amount": {
                            "value": payment_price_str,
                            "currency": "RUB"
                        },
                        "vat_code": 1, # –ë–µ–∑ –ù–î–°
                        "payment_mode": "full_prepayment",
                        "payment_subject": "service"
                    }
                ]
            },
            "metadata": {
                "tg_id": str(message.from_user.id),
                "name": name,
                "phone": phone,
                "count": str(count)
            }
        }

        print("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:", payment_data)

        payment = Payment.create(payment_data, uuid.uuid4())
        confirmation_url = payment.confirmation.confirmation_url
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ YooKassa:", exc_info=True)
        await state.clear()
        return

    pay_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=confirmation_url)]
    ])

    await message.answer(f"{summary}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:", reply_markup=pay_kb)
    await state.clear()


# --- FLASK –í–ï–ë–•–£–ö ---

async def send_success_message(user_id: int, ticket_numbers: list[str]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ."""
    global available_tickets
    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª-–≤–æ –±–∏–ª–µ—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    available_tickets -= len(ticket_numbers)
    
    await bot.send_message(
        user_id,
        f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) <b>{len(ticket_numbers)}</b> –±–∏–ª–µ—Ç(–æ–≤)\n"
        f"üìå –¢–≤–æ–∏ –Ω–æ–º–µ—Ä–∞: <b>{', '.join(ticket_numbers)}</b>\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏ –∏—Ö! –ò–º–µ–Ω–Ω–æ –ø–æ –Ω–∏–º –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.\n"
        f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏! üçÄ"
    )
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ù–æ–º–µ—Ä–∞: {ticket_numbers}")


@app.route('/yookassa/webhook', methods=['POST'])
def yookassa_webhook():
    print("üîî –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω –æ—Ç YooKassa")
    try:
        data = request.json
        print("–¢–µ–ª–æ –≤–µ–±—Ö—É–∫–∞:", data)

        if data.get('event') == 'payment.succeeded':
            metadata = data['object']['metadata']
            user_id = int(metadata['tg_id'])
            name = metadata['name']
            phone = metadata['phone']
            count = int(metadata['count'])

            print(f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç {name} (ID: {user_id}) –Ω–∞ {count} –±–∏–ª–µ—Ç–æ–≤.")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
            ticket_numbers = append_to_sheet(name, phone, count)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º async —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ sync –ø–æ—Ç–æ–∫–∞
            main_loop = g.get('main_loop')
            if main_loop and main_loop.is_running():
                asyncio.run_coroutine_threadsafe(
                    send_success_message(user_id, ticket_numbers),
                    main_loop
                )
            else:
                logging.error("Event loop –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)

    return '', 200


# --- –ó–ê–ü–£–°–ö ---

def start_flask(loop):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    @app.before_request
    def before_request():
        g.main_loop = loop

    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ production-ready —Å–µ—Ä–≤–µ—Ä –≤–º–µ—Å—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –≤ Flask
    from waitress import serve
    serve(app, host="0.0.0.0", port=5000)
    # app.run(host="0.0.0.0", port=5000) # –û—Å—Ç–∞–≤–∏–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–ª–∞–¥–∫–∏, –Ω–æ waitress –ª—É—á—à–µ

async def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop
    loop = asyncio.get_running_loop()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –ø–µ—Ä–µ–¥–∞–≤ –µ–º—É loop
    flask_thread = threading.Thread(target=start_flask, args=(loop,))
    flask_thread.daemon = True
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
