# new_bot.py
import asyncio
import logging
import sys
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F, html, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from flask import Flask, request, g
from yookassa import Configuration, Payment
import uuid
import threading
from waitress import serve

# --- –ù–ê–®–ò –ú–û–î–£–õ–ò ---
from key import my_key
from json_storage import add_user_if_not_exists, add_tickets_for_payment

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
Configuration.account_id = "1085561"
Configuration.secret_key = "live_L2jrGwfcPBjEmTk_tJlzN7PaD36dPljqctXPrw0TVbU"
TOKEN = my_key
TICKET_PRICE = 1

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
app = Flask(__name__)
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

available_tickets = 888
user_start_times = {}
BOT_START_TIME = datetime.now()

# --- FSM –°–¢–ï–ô–¢–´ ---
class Form(StatesGroup):
    name = State()
    phone = State()
    ticket_count = State()

# --- –•–ï–ù–î–õ–ï–†–´ AIOGRAM ---

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    args = message.text.split(maxsplit=1)
    arg = args[1] if len(args) > 1 else None
    print(f"/start received with arg: {arg}")

    # --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ë–õ–û–ö ---
    if arg == "payment_done":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! ‚úÖ "
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à—É JSON-–±–∞–∑—É
    add_user_if_not_exists(
        user_id=message.from_user.id,
        first_name=message.from_user.first_name,
        username=message.from_user.username or ""
    )

    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîç –£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è', callback_data='show_rules')]
    ])

    photo_file_id = "AgACAgIAAxkBAAICx2hqkPpqYTYgLjcb4x6Nniyc7nuTAALb9TEbhJZZSzy800ilJfUOAQADAgADeQADNgQ"

    caption_text = (
        f"<b><i>–ü—Ä–∏–≤–µ—Ç! {html.bold(message.from_user.first_name)}, —ç—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã NPAuto</i></b> üëã \n\n"
        "–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ <b><i>–ú–´ –ø—Ä–æ–≤–µ–¥–µ–º</i></b> —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞—Å—à—Ç–∞–±–Ω—ã–π <b>–ø—Ä–æ–º–æ-—Ä–æ–∑—ã–≥—Ä—ã—à!</b> üöó üéÅ \n\n"
        "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Å—Ç–∞–Ω–µ—Ç –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π <b><i>Audi A4</i></b>\n\n"
        "<b><i>–ù–æ —ç—Ç–æ –µ—â–µ –Ω–µ –≤—Å–µ!!!</i></b> –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è\n"
        " –≤–∞—Å –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏—è—Ç–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤:\n\n"
        "üí´ <b><i>3 –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–∞—à–∏—Ö —Ñ–∏—Ä–º–µ–Ω–Ω—ã—Ö\n"
        "–Ω–∞–∫–ª–µ–µ–∫ –ø–æ–ª—É—á–∞—Ç - </i></b>–ù–∞—É—à–Ω–∏–∫–∏\n"
        "Apple AirPods 4\n"
        "üí´ <b><i>2 –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç - </i></b>–ß–∞—Å—ã\n"
        "Apple Watch SE 2\n"
        "üí´ <b><i>2 –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç - </i></b>–£–º–Ω—É—é –∫–æ–ª–æ–Ω–∫—É\n"
        "–ê–ª–∏—Å–∞ –º–∏–Ω–∏\n"
        "üí´ <b><i>1 –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç - </i></b>–ü—Ä–æ–≥—É–ª–∫—É –Ω–∞\n"
        "–∫–∞—Ç–µ—Ä–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –ü–∏—Ç–µ—Ä–∞\n"
        "üí´ <b><i>10 –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏—Ç - </i></b>–Ω–∞–∫–ª–µ–π–∫—É,\n"
        "–∫–æ—Ç–æ—Ä–∞—è –¥–∞–µ—Ç –ø—Ä–∞–≤–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º\n"
        "—Å–ª–µ–¥—É—é—â–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n\n"
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è üçÄ"
    )
    await message.answer_photo(
        photo=photo_file_id,
        caption=caption_text,
        reply_markup=inline_keyboard,
        parse_mode=ParseMode.HTML
    )

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–æ process_ticket_count –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@dp.callback_query(F.data == "show_rules")
async def send_rules(callback: types.CallbackQuery):
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+r2nV1ThTyZVlNzli")],
        [InlineKeyboardButton(text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="participate")]
    ])
    await callback.answer()

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–ö–°–¢ ---
    caption_text = (
        "<b><i>–†–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –º—ã –±—É–¥–µ–º\n"
        "—Å—Ä–µ–¥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –Ω–∞—à–∏—Ö –Ω–∞–∫–ª–µ–µ–∫ üòÅ\n"
        "–ö–∞–∂–¥–æ–º—É –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–µ–Ω</i></b>\n"
        "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£\n\n"
        "<b><i>–£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –ø—Ä–æ—Å—Ç—ã:üìã</i></b>\n\n"
        "1. –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n"
        "<b><i>NPAuto</i></b>, —á—Ç–æ–± –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π.\n\n"
        f"2. –ö—É–ø–∏—Ç—å –Ω–∞–∫–ª–µ–π–∫—É —Å—Ç–æ–∏–º–æ—Å—Ç—å—é <b>{TICKET_PRICE} —Ä—É–±</b>\n"
        "–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥. üî¢\n\n"
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–≥ <i> –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
        f"<i>–í—Å–µ–≥–æ –≤ –ø—Ä–æ–¥–∞–∂–µ {available_tickets} –Ω–∞–∫–ª–µ–µ–∫, –∫—É–ø–∏–≤ –∫–æ—Ç–æ—Ä—ã–µ, "
        "–≤—ã —Å–º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏.</i> üòé\n\n"
        "<b>*–ü—Ä–æ–º–æ-—Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –¥–æ 31.07.2025.</b>\n\n"
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø—Ä–∏–∑, –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º –≤ –Ω–∞—à–µ–º –¢–ì –∫–∞–Ω–∞–ª–µ!"
    )

    await callback.message.answer_video(
        video="BAACAgIAAxkBAAMFaF_JunR6fKD6Dq6lHtOJflr8hsAAAptwAAI3qwABS5CXnF6ECpdsNgQ",
        caption=caption_text, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        reply_markup=inline_kb,
        parse_mode=ParseMode.HTML
    )

@dp.callback_query(F.data == "participate")
async def handle_participation(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channel_id = "@npcoolauto"

    try:
        member = await callback.bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if member.status in ["member", "administrator", "creator"]:
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="fill_form")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_rules")]
            ])
            await callback.message.answer(
                "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n"
                "–ü–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ —è –±—É–¥—É –µ–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å, —Ç–∞–∫ —á—Ç–æ\n"
                "–æ—Å—Ç–∞–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª–µüòâ\n\n"
                "–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É,\n"
                "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞–∫–ª–µ–π–∫—É –∏ —Ç—ã –≤ –¥–µ–ª–µ‚¨áÔ∏è",
                reply_markup=inline_kb
            )
        else:
            raise Exception("Not subscribed")
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/+r2nV1ThTyZVlNzli")],
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])
        await callback.message.answer_photo(
            photo="AgACAgIAAxkBAAMDaF_JVWA10_CyZiTuXWzThJzp2xoAAnnzMRtu2fhKSg8xW2NZvC0BAAMCAAN4AAM2BA",
            caption="<b>‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –≤–∏–∂—É —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ</b>\n"
                    "<b>–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤</b>ü•∫/n/n"
                    "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–æ–º–æ-—Ä–æ–∑—ã–≥—Ä—ã—à–µ,\n"
                    "–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª NPAuto –∏ –Ω–∞–∂–º–∏\n"
                    "'–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
            reply_markup=inline_kb,
            parse_mode="HTML"
        )

@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery):
    await handle_participation(callback)

@dp.callback_query(F.data == "fill_form")
async def start_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è <b>–Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –ò–ú–Ø</b>\nüëá")
    await state.set_state(Form.name)

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚ùó –¢—ã –Ω–µ –≤–≤–µ–ª –∏–º—èüò¢")
        return
    await state.update_data(name=name)
    await message.answer("üìû <b>–ò –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n–≤ —Ñ–æ—Ä–º–∞—Ç–µ: +79991234567\n\n"
                         "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –±–µ—Å–ø–æ–∫–æ–∏—Ç—å —Å–ø–∞–º–æ–º –Ω–µ –±—É–¥–µ–ºüòâ")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not (phone.startswith("+7") and len(phone) == 12 and phone[2:].isdigit()):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑üòâ")
        return

    await state.update_data(phone=phone)
    user_start_times[message.from_user.id] = datetime.now()

    await message.answer(f"<b>–ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ –Ω–∞–∫–ª–µ–µ–∫ –¢–´ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?üòä</b>\n\n"
                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å 1-–π –Ω–∞–∫–ª–µ–π–∫–∏ - <b>{TICKET_PRICE} —Ä—É–±</b>üí∏\n\n"
                         f"–ß–µ–º –±–æ–ª—å—à–µ —É —Ç–µ–±—è –Ω–∞–∫–ª–µ–µ–∫, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –≤—ã–∏–≥—Ä–∞—Ç—å Audi A4!\n"
                         f"–í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏\n"
                         f"—Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: <b><i>–∫—É–ø–∏–≤ 2 –Ω–∞–∫–ª–µ–π–∫–∏,\n"
                         f"—Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –≤ –ø–æ–¥–∞—Ä–æ–∫\n"
                         f"1 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥</i></b>ü§©\n\n"
                         f"<i>*—Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–µ 6 —á–∞—Å–æ–≤ —Å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–∞–∂</i>")
    await state.set_state(Form.ticket_count)


@dp.message(Form.ticket_count)
async def process_ticket_count(message: types.Message, state: FSMContext):
    global available_tickets
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∫–ª–µ–µ–∫, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ö–£–ü–ò–¢–¨
        count = int(message.text.strip())
        if count <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except (ValueError, TypeError):
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –Ω–∞–∫–ª–µ–µ–∫.")
        return

    if count > available_tickets:
        await message.answer(f"‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {available_tickets} –Ω–∞–∫–ª–µ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return

    # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–¥–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ü–∏–∏ ---
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–µ–µ–∫
    codes_to_generate = count
    discount_applied = False
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∞–∫—Ü–∏—è (6 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞)
    if (now - BOT_START_TIME) <= timedelta(hours=6):
        # –ï—Å–ª–∏ –∞–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç –†–û–í–ù–û 2 –Ω–∞–∫–ª–µ–π–∫–∏
        if count == 2:
            codes_to_generate = 3  # –î–∞–µ–º 3 –∫–æ–¥–∞ (2 –∫—É–ø–ª–µ–Ω–Ω—ã—Ö + 1 –±–æ–Ω—É—Å–Ω—ã–π)
            discount_applied = True  # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–∫—Ü–∏–∏

    # –¶–µ–Ω–∞ –í–°–ï–ì–î–ê —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ö–£–ü–õ–ï–ù–ù–´–• –Ω–∞–∫–ª–µ–µ–∫
    price = TICKET_PRICE * count

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM –∏ —Ü–µ–Ω—É, –∏ –ò–¢–û–ì–û–í–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤
    await state.update_data(
        ticket_count=count,          # –°–∫–æ–ª—å–∫–æ –Ω–∞–∫–ª–µ–µ–∫ –∫—É–ø–∏–ª
        price=price,
        final_code_count=codes_to_generate  # –°–∫–æ–ª—å–∫–æ –∫–æ–¥–æ–≤ –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–∏—Ç
    )
    user_data = await state.get_data()
    name = user_data.get("name")
    phone = user_data.get("phone")

    if not name or not phone:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ /start.")
        await state.clear()
        return

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    summary = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∫–ª–µ–µ–∫ –∫ –ø–æ–∫—É–ø–∫–µ: {count}\nüí∞ C—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±\n"

    if discount_applied:
        summary += f"üéâ <b>–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å–ø–µ—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b> –í—ã –ø–æ–ª—É—á–∏—Ç–µ <b>{codes_to_generate} –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤!</b>\n"
    else:
        summary += f"üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–¥–æ–≤: {codes_to_generate}\n"


    summary += (
        f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∫–ª–µ–µ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–∞—Å –Ω–∞ 5 –º–∏–Ω—É—Çüëå\n\n"
        f"‚ÄºÔ∏è<b><i>–í–ù–ò–ú–ê–ù–ò–ï</i></b>‚ÄºÔ∏è –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ—Å—å–±–∞ "
        f"<b><i>–æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ –°–ë–ü –∏ —Å–¥–µ–ª–∞—Ç—å</i></b> "
        f"<b><i>—Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞!!!</i></b>\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º "
        f"–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ü•≥\n\n"
        f"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏ –Ω–∞–º "
        f"–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –ø–æ –Ω–æ–º–µ—Ä—É +79995295511\n\n"
        f"<b><i>–ï—Å–ª–∏ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ, –∂–º–∏ '–ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'</i></b>\n"
        f"‚¨áÔ∏è"
    )

    try:
        payment_price_str = f"{price:.2f}"
        bot_info = await bot.get_me()

        payment_data = {
            "amount": {"value": payment_price_str, "currency": "RUB"},
            "confirmation": {
                "type": "redirect",
                "return_url": f"https://t.me/{bot_info.username}?start=payment_done"
            },
            "capture": True,
            "description": f"–ü–æ–∫—É–ø–∫–∞ {count} –Ω–∞–∫–ª–µ–µ–∫ –æ—Ç NPAuto. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}",
            "receipt": {
                "customer": {"phone": phone},
                "items": [{
                    "description": f"–§–∏—Ä–º–µ–Ω–Ω–∞—è –Ω–∞–∫–ª–µ–π–∫–∞ NPAuto ({count} —à—Ç.)", # –í —á–µ–∫–µ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–µ–µ–∫
                    "quantity": str(count),
                    "amount": {"value": f"{TICKET_PRICE:.2f}", "currency": "RUB"}, # –¶–µ–Ω–∞ –∑–∞ 1 —à—Ç.
                    "vat_code": 1,
                    "payment_mode": "full_prepayment",
                    "payment_subject": "commodity" # –ù–∞–∫–ª–µ–π–∫–∞ - —ç—Ç–æ —Ç–æ–≤–∞—Ä (commodity)
                }]
            },
            "metadata": {
                "tg_id": str(message.from_user.id),
                "name": name,
                "phone": phone,
                "count": str(codes_to_generate) # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –¥–ª—è –∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            }
        }
        
        payment = Payment.create(payment_data, uuid.uuid4())
        confirmation_url = payment.confirmation.confirmation_url
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ YooKassa:", exc_info=True)
        await state.clear()
        return

    pay_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=confirmation_url)]
    ])
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–π summary –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π, –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    await message.answer(summary, reply_markup=pay_kb, parse_mode=ParseMode.HTML)
    await state.clear()


# --- FLASK –í–ï–ë–•–£–ö ---

# --- FLASK –í–ï–ë–•–£–ö ---

async def send_success_message(user_id: int, ticket_numbers: list[str]):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –≤–º–µ—Å—Ç–µ —Å –≤–∏–¥–µ–æ."""
    global available_tickets
    
    # –í–ê–ñ–ù–û: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –Ω–∞–∫–ª–µ–µ–∫ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–¥–æ–≤.
    # –ß—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã.
    # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –≤—ã—á–∏—Ç–∞–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–¥–æ–≤.
    # –ï—Å–ª–∏ —É –≤–∞—Å –∞–∫—Ü–∏—è "2+1", —Ç–æ –≤—ã—á–∏—Ç–∞—Ç—å—Å—è –±—É–¥–µ—Ç 3, –∞ –Ω–µ 2. –≠—Ç–æ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –≤ –≤–∏–¥—É.
    available_tickets -= len(ticket_numbers)
    
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ file_id –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ
    video_file_id = "BAACAgIAAxkBAAICe2hqf4KRNqxJ4rdSJcZpk0wZaA_SAAIofwAChJZZSxqaBQeuOPLfNgQ" # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô FILE_ID

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (caption –¥–ª—è –≤–∏–¥–µ–æ)
    caption_text = (
        f"üéâ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º,</b>\n"
        f"<b>—Ç—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –ø—Ä–æ–º–æ-—Ä–æ–∑—ã–≥—Ä—ã—à–µ,</b>\n"
        f"<b>—É–¥–∞—á–∏!üçÄ</b>\n\n"
        f"–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) <b>{len(ticket_numbers)}</b> –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–¥–∞(–æ–≤)\n"
        f"–¢–≤–æ–π –∫–æ–¥(—ã): <b>{', '.join(ticket_numbers)}</b>\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏ —Å–≤–æ–π(–∏) –∫–æ–¥(—ã)!\n"
        f"–ò–º–µ–Ω–Ω–æ <b>–ø–æ –∫–æ–¥—É –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º</b>\n"
        f"<b>–æ–±–ª–∞–¥–∞—Ç–µ–ª—è Audi A4</b>\n"
        f"<b>–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∑–æ–≤ üí´</b>\n\n"
        f"–ö–∞–∫ –∏ –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é\n"
        f"–Ω–∞–∫–ª–µ–π–∫—É, –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º\n"
        f"–≤ –Ω–∞—à–µ–º –¢–ì –∫–∞–Ω–∞–ª–µ üòé\n\n"
        f"–ë—É–¥—å –Ω–∞ —Å–≤—è–∑–∏ üì≤"
    )

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.send_video –≤–º–µ—Å—Ç–æ bot.send_message
        await bot.send_video(
            chat_id=user_id,
            video=video_file_id,
            caption=caption_text,
            parse_mode=ParseMode.HTML # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ HTML-—Ç–µ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç—Å—è
        )
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ù–æ–º–µ—Ä–∞: {ticket_numbers}")
    except Exception as e:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–∞—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π file_id),
        # –æ—Ç–ø—Ä–∞–≤–∏–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç.")
        await bot.send_message(
            chat_id=user_id,
            text=caption_text,
            parse_mode=ParseMode.HTML
        )

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –≤–µ–±—Ö—É–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

@app.route('/yookassa/webhook', methods=['POST'])
def yookassa_webhook():
    print("üîî –í–µ–±—Ö—É–∫ –ø–æ–ª—É—á–µ–Ω –æ—Ç YooKassa")
    try:
        data = request.json
        print("–¢–µ–ª–æ –≤–µ–±—Ö—É–∫–∞:", data)

        if data.get('event') == 'payment.succeeded':
            metadata = data['object']['metadata']
            user_id = int(metadata['tg_id'])
            name = metadata['name']
            phone = metadata['phone']
            count = int(metadata['count'])

            print(f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç {name} (ID: {user_id}) –Ω–∞ {count} –Ω–∞–∫–ª–µ–µ–∫.")

            # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–ª–µ—Ç—ã –≤ –Ω–∞—à—É JSON-–±–∞–∑—É
            ticket_numbers = add_tickets_for_payment(user_id, name, phone, count)
            ticket_numbers_str = [str(num) for num in ticket_numbers]

            main_loop = g.get('main_loop')
            if main_loop and main_loop.is_running():
                asyncio.run_coroutine_threadsafe(
                    send_success_message(user_id, ticket_numbers_str),
                    main_loop
                )
            else:
                logging.error("Event loop –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)

    return '', 200


@dp.message(F.photo)
async def get_photo_file_id(message: types.Message):
    # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
    file_id = message.photo[-1].file_id
    await message.answer(f"üì∏ Photo file_id: <code>{file_id}</code>")
    print(f"üñºÔ∏è –ü–æ–ª—É—á–µ–Ω photo file_id: {file_id}")


# --- –ó–ê–ü–£–°–ö ---

def start_flask(loop):
    @app.before_request
    def before_request():
        g.main_loop = loop
    serve(app, host="0.0.0.0", port=5000)

async def main():
    loop = asyncio.get_running_loop()
    flask_thread = threading.Thread(target=start_flask, args=(loop,))
    flask_thread.daemon = True
    flask_thread.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


